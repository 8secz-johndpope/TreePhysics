
// In order to reduce the likelihood of overflow, instead of calculating c1*pow(e,r1*t) (where
// sometimes r1 is very large), we can calculate the equivalent c1*pow(pow(e,t),r1) =
// pow(pow(c1,1/r1),r1)*pow(pow(e,t),r1) = pow(pow(c1,1/r1)*pow(e,t),r1). Since
// pow(c1,1/r1)*pow(e,t) tends to be much smaller than e, this seems to work?

T c1per1t = pow(pow(c1,1.0/r1)*pow(M_E_F,t),r1);
T c2per1t = pow(pow(c2,1.0/r1)*pow(M_E_F,t),r1);

switch (differentialSolution.type) {
    case QuadraticSolutionTypeComplex:
        y = c1per1t*cos(r2*t) + c2per1t*sin(r2*t) + k;
        y_ddt = r1*c1per1t*cos(r2*t) - r2*c1per1t*sin(r2*t) +
        r1*c2per1t*sin(r2*t) + r2*c2per1t*cos(r2*t);
        y_d2dt = r1*r1*c1per1t*cos(r2*t) - r2*r1*c1per1t*sin(r2*t) -
        (r1*r2*c1per1t*sin(r2*t) + r2*r2*c1per1t*cos(r2*t)) +
        r1*r1*c2per1t*sin(r2*t) + r2*r1*c2per1t*cos(r2*t) +
        r1*r2*c2per1t*cos(r2*t) - r2*r2*c2per1t*sin(r2*t);
        break;
    case QuadraticSolutionTypeReal:
        y = c1per1t + t*c2per1t + k;
        y_ddt = r1*c1per1t +
        c2per1t + r1*t*c2per1t;
        y_d2dt = r1*r1*c1per1t +
        r1*c2per1t +
        r1*c2per1t + r1*r1*t*c2per1t;
        break;
    case QuadraticSolutionTypeRealDistinct:
        T c2per2t = pow(pow(c2,1/r2)*pow(M_E_F,t),r2);

        y = c1per1t + c2per2t + k;
        y_ddt = r1*c1per1t + r2*c2per2t;
        y_d2dt = r1*r1*c1per1t + r2*r2*c2per2t;
        break;
}
